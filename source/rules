#######################################################################
## 
## Ritter rules file
## 
## use folowing macros and then just include this file
##
## objects      = 
##   - objects to build for latter linkage to an executable
## 
## executables  = 
##   - list of executables to build
##
## librarys     =
##   - list of user librarys to link against the executables
##
## lib_objects  =
##   - list of object to build and to put into the library to build
##
## library      =
##   - name of the library to build
##
#######################################################################

.SUFFIXES:
.SUFFIXES: .cpp .o .d .lib

# Buildtype
# debug, release or profile
BUILD_TYPE     = release

# Toolset
# gcc, mingw or msvc
TOOL_SET       = mingw

# Pfadangaben
SOURCEPATH     = 
INCLUDEPATH    = $(SIOUX_ROOT)/source

EXEPATH        = $(SIOUX_OUT)/$(TOOL_SET)/$(BUILD_TYPE)/exe/
LIBPATH        = $(SIOUX_OUT)/$(TOOL_SET)/$(BUILD_TYPE)/lib/
OBJECTPATH	   = $(SIOUX_OUT)/$(TOOL_SET)/$(BUILD_TYPE)/obj/$(library)/

BOOSTPATH      = "C:/Boost/lib/"
BOOSTLIBS      = filesystem thread regex
BOOSTVERSION   = 1_33_1

empty          =
space          = $(empty) $(empty)

CLEAN		   = del /F /S /Q
MKDIR          = mkdir -p        			

# CPlusPlus
# Gnu Compiler Collection
ifeq ($(TOOL_SET), gcc)
  CXXINCLUDE      = -I./ -I$(INCLUDEPATH) -I- \
                    -I"c:/boost/include/boost-$(BOOSTVERSION)" 
  CXXDEFAULTFLAGS = -MMD -Wall -W -Wno-unused -Wno-long-long -Wreturn-type -pipe -mthreads -mno-cygwin -frtti -fexceptions
  CXXOBJECT_SWITCH= -o$(space)
  CXX             = g++

  LINKER          = g++
  LINKFLAGS       = -mno-cygwin -mthreads -Wl,-Map -Wl,map.map -L$(LIBPATH) -L$(BOOSTPATH) \
                    -lMswsock -lWs2_32
  LINKADDLIB      = -l
  LINKADDDIR      = 
  LINKADDOUTPUT   = -o$(space)
  LINKLIBREFIX    = 

  LIBRARIAN       = ar -rc$(space)
  LIBRARY_EXT     = .a

  BOOST_TOOLSET   = gcc-mt
  BOOST_PREFIX    = libboost_

  CLEAN           = rm -vrf
  
  ifeq ($(BUILD_TYPE), release)
  CXXFLAGS      = $(CXXDEFAULTFLAGS) -O3
  endif

  ifeq ($(BUILD_TYPE), debug)
  CXXFLAGS      = $(CXXDEFAULTFLAGS) -O0 -ggdb
  endif

  ifeq ($(BUILD_TYPE), profile)
  CXXFLAGS      = $(CXXDEFAULTFLAGS) -O3 -pg 
  endif

endif # gcc

# Gnu Compiler Collection; MinGW
ifeq ($(TOOL_SET), mingw)
  CXXINCLUDE      = -I. -I$(INCLUDEPATH) -I- \
                    -I"c:/boost/include/boost-$(BOOSTVERSION)" 
  CXXDEFAULTFLAGS = -MMD -Wall -W -Wno-unused -Wno-long-long -Wreturn-type -pipe -mthreads -frtti -fexceptions
  CXXOBJECT_SWITCH= -o$(space)
  CXX             = mingw32-g++

  LINKER          = mingw32-g++
  LINKFLAGS       = -mno-cygwin -mthreads -Wl,-Map -Wl,map.map -L$(LIBPATH) -L$(BOOSTPATH) \
                    -lMswsock -lWs2_32
  LINKADDLIB      = -l
  LINKADDDIR      = 
  LINKADDOUTPUT   = -o$(space)
  LINKLIBREFIX    = 

  LIBRARIAN       = ar -rc$(space)
  LIBRARY_EXT     = .a

  BOOST_TOOLSET   = gcc-mt
  BOOST_PREFIX    = boost_

  MKDIR           = mkdir
   
  ifeq ($(BUILD_TYPE), release)
  CXXFLAGS      = $(CXXDEFAULTFLAGS) -O2
  endif

  ifeq ($(BUILD_TYPE), debug)
  CXXFLAGS      = $(CXXDEFAULTFLAGS) -O0 -ggdb
  endif

  ifeq ($(BUILD_TYPE), profile)
  CXXFLAGS      = $(CXXDEFAULTFLAGS) -O3 -pg 
  endif

endif # gcc

# Microsoft Visiual C++
ifeq ($(TOOL_SET), msvc)
  CXXINCLUDE      = /I./ /I$(INCLUDEPATH) \
                  /I"C:\Programme\Microsoft Visual Studio .NET 2003\Vc7\include" \
                  /I"C:\Programme\Microsoft Visual Studio .NET 2003\Vc7\PlatformSDK\Include" \
                  /I"C:\boost\include\boost-$(BOOSTVERSION)" 
  CXXDEFAULTFLAGS = /EHs /Za /GR /nologo /W4 /WX /wd4130 /wd4800 /wd4512 /wd4189 /wd4275 \
                    /wd4505 /wd4511 /wd4127 /wd4355
  CXXOBJECT_SWITCH = /Fo
  CXX             = cl
  
  # Linker
  LINKER          = link
  LINKFLAGS       = /LIBPATH:$(LIBPATH) /LIBPATH:$(BOOSTPATH) /MAP \
                    /LIBPATH:"C:\Programme\Microsoft Visual Studio .NET 2003\Vc7\lib" \
                    /LIBPATH:"C:\Programme\Microsoft Visual Studio .NET 2003\Vc7\PlatformSDK\Lib"
  LINKADDLIB      = 
  LINKADDDIR      = 
  LINKADDOUTPUT   = /OUT:
  LINKLIBREFIX    = lib

  LIBRARIAN       = lib
  LIBRARY_EXT     = .lib

  BOOST_TOOLSET   = vc71-mt
  
  ifeq ($(BUILD_TYPE), release)
  CXXFLAGS      = $(CXXDEFAULTFLAGS) /MD
  endif

  ifeq ($(BUILD_TYPE), debug)
  CXXFLAGS      = $(CXXDEFAULTFLAGS) /MDd /Od /RTC1
  endif

  ifeq ($(BUILD_TYPE), profile)
  CXXFLAGS      = $(CXXDEFAULTFLAGS)
  endif

endif # msvc

# Buildtypedependent Definitions
ifeq ($(BUILD_TYPE), release)
  BOOSTLIBSEL   = 
endif

ifeq ($(BUILD_TYPE), debug)
  BOOSTLIBSEL   = 
endif

ifeq ($(BUILD_TYPE), profile)
  BOOSTLIBSEL   = 
endif

# assemble libraries for the linker comandline
BOOST_LIBRARY_NAMES  = $(BOOSTLIBS:%=$(LINKADDLIB)$(BOOST_PREFIX)%-$(BOOST_TOOLSET)$(BOOSTLIBSEL)-$(BOOSTVERSION))
SIOUX_LIBRARY_NAMES = $(librarys:%=$(LINKADDLIB)$(LINKLIBREFIX)%)
LIBRARYS             = $(SIOUX_LIBRARY_NAMES) $(BOOST_LIBRARY_NAMES)

# Functions

# $(call platt-file,file-or-path)
platt-file = $(subst /,\\,$(1))

# $(call make-dir,path)
ifeq ($(TOOL_SET), mingw)
	make-dir = @if not exist $(call platt-file,$(1)) $(MKDIR) $(call platt-file,$(1))
endif
	

# Default Rules

PLATT_OBJECTPATH = $(call platt-file,$(OBJECTPATH))

# compile (c++) / dependence
$(PLATT_OBJECTPATH)%.o $(PLATT_OBJECTPATH)%.d : %.cpp
	echo compile 
	$(call make-dir,$(OBJECTPATH))
	$(CXX) $(CXXFLAGS) $(CXXINCLUDE) -c $< $(CXXOBJECT_SWITCH)$(OBJECTPATH)$*.o

# linkage
$(EXEPATH)% : $(OBJECTPATH)%.o 
	$(call make-dir,$(EXEPATH))
	$(LINKER) $< $(LIBRARYS) $(LINKFLAGS) $(LINKADDOUTPUT)$@ ;\

$(EXEPATH)%.dll : $(OBJECTPATH)%.o
	$(call make-dir,$(EXEPATH))
	$(LINKER) -shared $< $(SOURCEPATH)$(*F).def \
	$(LIBRARYS) $(LINKFLAGS) -o $@ -Wl,--out-implib -Wl,$(LIBPATH)$(*F).dll.a ;\

# library

LIBRARY_NAME = 

ifneq ($(library),)
	LIBRARY_NAME = $(call platt-file,$(LIBPATH)$(library)$(LIBRARY_EXT))
endif

PLATT_OBJECTPATH = $(call platt-file,$(OBJECTPATH))

# A library object
$(LIBRARY_NAME)(%.o) : $(PLATT_OBJECTPATH)%.o
	$(call make-dir,$(LIBPATH))
	$(LIBRARIAN)$@ $<

# a whole library
$(LIBRARY_NAME) : $(lib_objects:%=$(LIBRARY_NAME)(%))

# Targets
.PHONY: build build_lib build_exe clean text all

build : build_lib build_exe

build_lib : $(LIBRARY_NAME)

build_exe : $(objects:%=$(OBJECTPATH)%) $(executables:%=$(EXEPATH)%) 

clean : 
	$(CLEAN) *.map *.o *.d *.log *.stackdump *.obj *.lis

test : 

all : clean build

#dependencies
ifneq ($(MAKECMDGOALS),clean)
  ifneq ($(lib_objects),)
    include $(lib_objects:%.o=$(PLATT_OBJECTPATH)%.d)
  endif
  ifneq ($(objects),)
    include $(objects:%.o=$(PLATT_OBJECTPATH)%.d)
  endif
endif



